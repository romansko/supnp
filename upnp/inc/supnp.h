/*!
 * \addtogroup SUPnP
 *
 * \file supnp.h
 *
 * \brief Header file for SUPnP secure layer method. Implementing logics from
 * the paper "Kayas, G., Hossain, M., Payton, J., & Islam, S. R. (2021). SUPnP:
 * Secure Access and Service Registration for UPnP-Enabled Internet of Things.
 * IEEE Internet of Things Journal, 8(14), 11561-11580."
 *
 * \author Roman Koifman
 */
#ifndef SUPNP_H
#define SUPNP_H

#include "UpnpGlobal.h" /* for UPNP_EXPORT_SPEC */
#include "upnpconfig.h"

#if ENABLE_SUPNP

#ifdef __cplusplus
extern "C" {
#endif

#include "supnp_device.h"

typedef int (*SUpnp_FunPtr)(
	/*! [in] .*/
	void *Cookie);

/*! Registration status */
typedef enum _ERegistrationStatus
{
	SUPNP_DEVICE_UNREGISTERED = 0,
	SUPNP_DEVICE_REGISTERED
}ERegistrationStatus;


// todo: A participant may request RA certificate
// todo: Retrieve captoken as a service? or response to registration.

/*! Registration Authority services. */
typedef enum _ERAServiceType
{
	/*! Registration Services. */
	RA_SERVICE_REGISTER = 0,

	/*! Number of services. */
	RA_SERVICE_COUNT
}ERAServiceType;

typedef enum _ERARegisterServiceActions
{
	/*! Register action. */
	RA_ACTIONS_REGISTER = 0,

	/*!< Challenge action. */
	RA_ACTIONS_CHALLENGE,

	/*! Number of actions. */
	RA_REGISTER_SERVICE_ACTIONS
}ERARegisterServiceActions;

/*! Registration service action Register variables. */
typedef enum _ERARegisterActionVariables
{
	/*! Specification Document hex string */
	RA_REGISTER_SPEC_DOC = 0,

	/*! Device Certificate hex string */
	RA_REGISTER_CERT_DEVICE,

	/*! UCA Certificate hex string */
	RA_REGISTER_CERT_UCA,

	/*! Number of variables. */
	RA_REGISTER_VARCOUNT

}ERARegisterActionVariables;

/*! Registration service action Chalenge variables. */
typedef enum _ERAChallengeActionVariables
{
	/*! Challenge response hex string */
	CHALLENGE_ACTION_RESPONSE = 0,

	/*! Public key hex string */
	CHALLENGE_ACTION_PUBLICKEY,

	/*! Number of variables. */
	CHALLENGE_ACTION_VARCOUNT

}ERAChallengeActionVariables;

typedef struct _RegistrationParams
{
	int handle; /* Registration handle */
	SUpnp_FunPtr callback;  /* To call upon successful registration */
	void *callback_cookie;
    const char *publicKeyPath;
    const char *privateKeyPath;
    const char *RegistrationDocsPath[RA_REGISTER_VARCOUNT];
	const char *desc_doc_uri;       /* Only for SD */
}RegistrationParams;

static const char *RaDeviceType = "urn:schemas-upnp-org:device:ra:1";
static const char *RaServiceType[RA_SERVICE_COUNT] = {
	"urn:schemas-upnp-org:service:registration:1"
};
static const char *RaRegistrationAction[RA_REGISTER_SERVICE_ACTIONS] = {
	"Register",
	"Challenge"
};
static const char *RaRegisterVarName[RA_REGISTER_VARCOUNT] = {
	"SpecificationDocument",
	"CertificateDevice",
	"CertificateUCA"
};
static const char *RaActionChallengeVarName[CHALLENGE_ACTION_VARCOUNT] = {
	"ChallengeResponse",
	"PublicKey"
};
static const char *RaResponseVarName = "VerificationResponse";
static const char *RaResponseSuccess = "1";


/* Forward declaration */
typedef struct evp_pkey_st EVP_PKEY;
typedef struct x509_st X509;
typedef struct cJSON cJSON;
typedef struct _IXML_Document IXML_Document;
typedef struct _IXML_NodeList IXML_NodeList;

/*!
 * \name SUPnP Document keys
 *
 * @{
 */
#define SUPNP_DOC_TYPE "TYPE"
#define SUPNP_DOC_NAME "NAME"
#define SUPNP_DOC_PUBLIC_KEY "PK"
#define SUPNP_DOC_SERVICES "SERVICES"
#define SUPNP_DOC_SIG_OWNER "SIG-OWNER"
#define SUPNP_DOC_SIG_UCA "SIG-UCA"
#define SUPNP_DOC_SIG_CON "SIG-VER-CON" /* Signature Verification Conditions */
#define SUPNP_DOC_SIGNATURES "SIGS"
#define SUPNP_HARDWARE_DESC "HW"
#define SUPNP_SOFTWARE_DESC "SW"
/* @} SUPnPDocumentkeys */

/*!
 * \name SUPnP Error codes
 *
 * The functions in the SDK API can return a variety of error
 * codes to describe problems encountered during execution.  This section
 * lists the error codes and provides a brief description of what each error
 * code means.  Refer to the documentation for each function for a
 * description of what an error code means in that context.
 *
 * @{
 */

/*!
 * \brief The operation completed successfully.
 *
 * For asynchronous functions, this only means that the packet generated by
 * the operation was successfully transmitted on the network.  The result of
 * the entire operation comes as part of the callback for that operation.
 */
#define SUPNP_E_SUCCESS (0)

/*!
 * \brief Generic error code for internal conditions not covered by other
 * error codes.
 */
#define SUPNP_E_INTERNAL_ERROR (-600)

/*!
 * \brief The function was passed an invalid argument.
 */
#define SUPNP_E_INVALID_ARGUMENT (-601)

/*!
 * \brief The filename passed to one of the device registration functions
 * was not found or was not accessible.
 */
#define SUPNP_E_FILE_NOT_FOUND (-602)

/*!
 * \brief The certificate is invalid.
 */
#define SUPNP_E_INVALID_CERTIFICATE (-603)

/*!
 * \brief The certificate is invalid.
 */
#define SUPNP_E_INVALID_SIGNATURE (-604)

/*!
 * \brief The DSD / SAD document is invalid.
 */
#define SUPNP_E_INVALID_DOCUMENT (-605)

/* @} SUPnPErrorCodes */


/*!
 * \brief Initialize SUPnP secure layer.
 *
 * \return SUPNP_E_SUCCESS on success, SUPNP_E_INTERNAL_ERROR on failure.
 */
UPNP_EXPORT_SPEC int SUpnpInit();

/*!
 * \brief Retrieve the first element item by name.
 *
 * \return The element item's value as a string.
 */
UPNP_EXPORT_SPEC char *GetFirstElementItem(IXML_Element *element, const char *item);

/*!
 * \brief Verify DSD / SAD document.
 *
 * \return SUPNP_E_SUCCESS on success, SUPNP_E_INVALID_CERTIFICATE on failure.
 */
UPNP_EXPORT_SPEC int SUpnpVerifyDocument(EVP_PKEY *ca_pkey, supnp_device_t *dev);


UPNP_EXPORT_SPEC int SupnpRegisterDevice(const char *pk_path,
	const char *sk_path,
    const char *RegistrationDocsPath[],
    const char *desc_doc_uri,
    int timeout,
    SUpnp_FunPtr callback,
    void *callback_cookie);


/* Internal */
int SendRAActionRegister(RegistrationParams *params, const char *controlUrl);


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* ENABLE_SUPNP */

#endif // SUPNP_H
